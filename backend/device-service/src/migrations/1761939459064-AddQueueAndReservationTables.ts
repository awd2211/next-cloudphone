import { MigrationInterface, QueryRunner } from "typeorm";

export class AddQueueAndReservationTables1761939459064 implements MigrationInterface {
    name = 'AddQueueAndReservationTables1761939459064'

    public async up(queryRunner: QueryRunner): Promise<void> {
        await queryRunner.query(`DROP INDEX "public"."idx_devices_status_expires"`);
        await queryRunner.query(`DROP INDEX "public"."idx_devices_provider_type"`);
        await queryRunner.query(`DROP INDEX "public"."idx_devices_external_id"`);
        await queryRunner.query(`DROP INDEX "public"."idx_devices_provider_status"`);
        await queryRunner.query(`DROP INDEX "public"."idx_devices_group"`);
        await queryRunner.query(`DROP INDEX "public"."idx_devices_user_status"`);
        await queryRunner.query(`DROP INDEX "public"."idx_devices_tenant_status"`);
        await queryRunner.query(`DROP INDEX "public"."idx_devices_user_created"`);
        await queryRunner.query(`DROP INDEX "public"."idx_devices_status_heartbeat"`);
        await queryRunner.query(`DROP INDEX "public"."idx_devices_container"`);
        await queryRunner.query(`DROP INDEX "public"."idx_devices_health_score"`);
        await queryRunner.query(`DROP INDEX "public"."idx_devices_user_provider"`);
        await queryRunner.query(`DROP INDEX "public"."idx_devices_expires_at"`);
        await queryRunner.query(`DROP INDEX "public"."idx_devices_auto_backup"`);
        await queryRunner.query(`DROP INDEX "public"."idx_devices_createdat"`);
        await queryRunner.query(`DROP INDEX "public"."idx_snapshots_device_created"`);
        await queryRunner.query(`DROP INDEX "public"."idx_device_snapshots_expires_at"`);
        await queryRunner.query(`DROP INDEX "public"."idx_device_snapshots_auto_backup"`);
        await queryRunner.query(`DROP INDEX "public"."idx_device_snapshots_device_id_created_at"`);
        await queryRunner.query(`DROP INDEX "public"."idx_device_allocations_device_id"`);
        await queryRunner.query(`DROP INDEX "public"."idx_device_allocations_user_id"`);
        await queryRunner.query(`DROP INDEX "public"."idx_device_allocations_tenant_id"`);
        await queryRunner.query(`DROP INDEX "public"."idx_device_allocations_status"`);
        await queryRunner.query(`DROP INDEX "public"."idx_device_allocations_allocated_at"`);
        await queryRunner.query(`DROP INDEX "public"."idx_device_allocations_expires_at"`);
        await queryRunner.query(`DROP INDEX "public"."idx_device_allocations_device_status"`);
        await queryRunner.query(`DROP INDEX "public"."idx_device_allocations_user_status"`);
        await queryRunner.query(`DROP INDEX "public"."idx_device_allocations_tenant_status"`);
        await queryRunner.query(`DROP INDEX "public"."idx_device_allocations_active_expired"`);
        await queryRunner.query(`ALTER TABLE "device_allocations" DROP CONSTRAINT "check_status"`);
        await queryRunner.query(`ALTER TABLE "device_allocations" DROP CONSTRAINT "check_duration_minutes"`);
        await queryRunner.query(`ALTER TABLE "device_allocations" DROP CONSTRAINT "check_duration_seconds"`);
        await queryRunner.query(`COMMENT ON TABLE "device_allocations" IS NULL`);
        await queryRunner.query(`CREATE TYPE "public"."device_reservations_status_enum" AS ENUM('pending', 'confirmed', 'executing', 'completed', 'cancelled', 'expired', 'failed')`);
        await queryRunner.query(`CREATE TABLE "device_reservations" ("id" uuid NOT NULL DEFAULT uuid_generate_v4(), "user_id" character varying NOT NULL, "tenant_id" character varying, "status" "public"."device_reservations_status_enum" NOT NULL DEFAULT 'pending', "reserved_start_time" TIMESTAMP WITH TIME ZONE NOT NULL, "reserved_end_time" TIMESTAMP WITH TIME ZONE, "duration_minutes" integer NOT NULL DEFAULT '60', "device_type" character varying, "min_cpu" integer, "min_memory" integer, "allocated_device_id" character varying, "allocation_id" character varying, "executed_at" TIMESTAMP WITH TIME ZONE, "cancelled_at" TIMESTAMP WITH TIME ZONE, "cancel_reason" text, "failed_at" TIMESTAMP WITH TIME ZONE, "failure_reason" text, "remind_before_minutes" integer NOT NULL DEFAULT '15', "reminder_sent" boolean NOT NULL DEFAULT false, "metadata" jsonb, "created_at" TIMESTAMP NOT NULL DEFAULT now(), "updated_at" TIMESTAMP NOT NULL DEFAULT now(), CONSTRAINT "PK_2f6380ff6303d8420066f3aab8f" PRIMARY KEY ("id"))`);
        await queryRunner.query(`CREATE INDEX "IDX_9878097628fe97b1df7429e2c2" ON "device_reservations" ("user_id") `);
        await queryRunner.query(`CREATE INDEX "IDX_c20138af3bba2b44ab606f3ca3" ON "device_reservations" ("device_type", "status") `);
        await queryRunner.query(`CREATE INDEX "IDX_2878599597f12b378905fed26f" ON "device_reservations" ("reserved_start_time", "status") `);
        await queryRunner.query(`CREATE INDEX "IDX_cb38a3b4b9e4d30780c6896a9f" ON "device_reservations" ("user_id", "status") `);
        await queryRunner.query(`CREATE TYPE "public"."allocation_queue_status_enum" AS ENUM('waiting', 'processing', 'fulfilled', 'expired', 'cancelled')`);
        await queryRunner.query(`CREATE TABLE "allocation_queue" ("id" uuid NOT NULL DEFAULT uuid_generate_v4(), "user_id" character varying NOT NULL, "tenant_id" character varying, "status" "public"."allocation_queue_status_enum" NOT NULL DEFAULT 'waiting', "priority" integer NOT NULL DEFAULT '0', "user_tier" character varying NOT NULL DEFAULT 'standard', "device_type" character varying, "min_cpu" integer, "min_memory" integer, "duration_minutes" integer NOT NULL DEFAULT '60', "queue_position" integer, "estimated_wait_minutes" integer, "max_wait_minutes" integer NOT NULL DEFAULT '30', "allocated_device_id" character varying, "allocation_id" character varying, "processed_at" TIMESTAMP WITH TIME ZONE, "fulfilled_at" TIMESTAMP WITH TIME ZONE, "cancelled_at" TIMESTAMP WITH TIME ZONE, "cancel_reason" text, "expired_at" TIMESTAMP WITH TIME ZONE, "expiry_reason" text, "retry_count" integer NOT NULL DEFAULT '0', "last_retry_at" TIMESTAMP WITH TIME ZONE, "metadata" jsonb, "created_at" TIMESTAMP NOT NULL DEFAULT now(), "updated_at" TIMESTAMP NOT NULL DEFAULT now(), CONSTRAINT "PK_6dd8f3f227ac863a172bb2b3364" PRIMARY KEY ("id"))`);
        await queryRunner.query(`CREATE INDEX "IDX_914731bf904e2e250850ee2df5" ON "allocation_queue" ("user_id") `);
        await queryRunner.query(`CREATE INDEX "IDX_464ea909149a700c25a48ea2fd" ON "allocation_queue" ("status") `);
        await queryRunner.query(`CREATE INDEX "IDX_65b9b3c578d40a13f805951cd1" ON "allocation_queue" ("user_id", "status") `);
        await queryRunner.query(`CREATE INDEX "IDX_7954507911e50543a11d9d471c" ON "allocation_queue" ("status", "priority", "created_at") `);
        await queryRunner.query(`ALTER TABLE "device_snapshots" DROP COLUMN "retention_days"`);
        await queryRunner.query(`ALTER TABLE "device_snapshots" DROP COLUMN "expires_at"`);
        await queryRunner.query(`ALTER TABLE "device_snapshots" DROP COLUMN "is_auto_backup"`);
        await queryRunner.query(`ALTER TABLE "device_snapshots" ADD "retentionDays" integer`);
        await queryRunner.query(`ALTER TABLE "device_snapshots" ADD "expiresAt" TIMESTAMP`);
        await queryRunner.query(`ALTER TABLE "device_snapshots" ADD "isAutoBackup" boolean NOT NULL DEFAULT false`);
        await queryRunner.query(`ALTER TABLE "devices" DROP COLUMN "description"`);
        await queryRunner.query(`ALTER TABLE "devices" ADD "description" text`);
        await queryRunner.query(`ALTER TYPE "public"."device_provider_type" RENAME TO "device_provider_type_old"`);
        await queryRunner.query(`CREATE TYPE "public"."devices_provider_type_enum" AS ENUM('redroid', 'huawei_cph', 'aliyun_ecp', 'physical')`);
        await queryRunner.query(`ALTER TABLE "devices" ALTER COLUMN "provider_type" DROP DEFAULT`);
        await queryRunner.query(`ALTER TABLE "devices" ALTER COLUMN "provider_type" TYPE "public"."devices_provider_type_enum" USING "provider_type"::"text"::"public"."devices_provider_type_enum"`);
        await queryRunner.query(`ALTER TABLE "devices" ALTER COLUMN "provider_type" SET DEFAULT 'redroid'`);
        await queryRunner.query(`DROP TYPE "public"."device_provider_type_old"`);
        await queryRunner.query(`ALTER TABLE "devices" ALTER COLUMN "provider_type" SET NOT NULL`);
        await queryRunner.query(`COMMENT ON COLUMN "devices"."provider_type" IS NULL`);
        await queryRunner.query(`ALTER TABLE "devices" DROP COLUMN "external_id"`);
        await queryRunner.query(`ALTER TABLE "devices" ADD "external_id" character varying`);
        await queryRunner.query(`COMMENT ON COLUMN "devices"."provider_config" IS NULL`);
        await queryRunner.query(`COMMENT ON COLUMN "devices"."connection_info" IS NULL`);
        await queryRunner.query(`ALTER TABLE "devices" DROP COLUMN "device_group"`);
        await queryRunner.query(`ALTER TABLE "devices" ADD "device_group" character varying`);
        await queryRunner.query(`ALTER TABLE "devices" ALTER COLUMN "health_score" SET NOT NULL`);
        await queryRunner.query(`COMMENT ON COLUMN "devices"."health_score" IS NULL`);
        await queryRunner.query(`COMMENT ON COLUMN "devices"."expires_at" IS NULL`);
        await queryRunner.query(`ALTER TABLE "devices" ALTER COLUMN "auto_backup_enabled" SET NOT NULL`);
        await queryRunner.query(`COMMENT ON COLUMN "devices"."auto_backup_enabled" IS NULL`);
        await queryRunner.query(`COMMENT ON COLUMN "devices"."backup_interval_hours" IS NULL`);
        await queryRunner.query(`COMMENT ON COLUMN "devices"."last_backup_at" IS NULL`);
        await queryRunner.query(`COMMENT ON COLUMN "devices"."device_tags" IS NULL`);
        await queryRunner.query(`ALTER TABLE "device_allocations" DROP COLUMN "device_id"`);
        await queryRunner.query(`ALTER TABLE "device_allocations" ADD "device_id" uuid NOT NULL`);
        await queryRunner.query(`ALTER TABLE "device_allocations" DROP COLUMN "user_id"`);
        await queryRunner.query(`ALTER TABLE "device_allocations" ADD "user_id" character varying NOT NULL`);
        await queryRunner.query(`ALTER TABLE "device_allocations" DROP COLUMN "tenant_id"`);
        await queryRunner.query(`ALTER TABLE "device_allocations" ADD "tenant_id" character varying`);
        await queryRunner.query(`ALTER TABLE "device_allocations" DROP COLUMN "status"`);
        await queryRunner.query(`CREATE TYPE "public"."device_allocations_status_enum" AS ENUM('allocated', 'released', 'expired')`);
        await queryRunner.query(`ALTER TABLE "device_allocations" ADD "status" "public"."device_allocations_status_enum" NOT NULL DEFAULT 'allocated'`);
        await queryRunner.query(`COMMENT ON COLUMN "device_allocations"."allocated_at" IS NULL`);
        await queryRunner.query(`ALTER TABLE "device_allocations" ALTER COLUMN "allocated_at" DROP DEFAULT`);
        await queryRunner.query(`COMMENT ON COLUMN "device_allocations"."released_at" IS NULL`);
        await queryRunner.query(`COMMENT ON COLUMN "device_allocations"."expires_at" IS NULL`);
        await queryRunner.query(`COMMENT ON COLUMN "device_allocations"."duration_minutes" IS NULL`);
        await queryRunner.query(`COMMENT ON COLUMN "device_allocations"."duration_seconds" IS NULL`);
        await queryRunner.query(`COMMENT ON COLUMN "device_allocations"."metadata" IS NULL`);
        await queryRunner.query(`ALTER TABLE "device_allocations" DROP COLUMN "created_at"`);
        await queryRunner.query(`ALTER TABLE "device_allocations" ADD "created_at" TIMESTAMP NOT NULL DEFAULT now()`);
        await queryRunner.query(`ALTER TABLE "device_allocations" DROP COLUMN "updated_at"`);
        await queryRunner.query(`ALTER TABLE "device_allocations" ADD "updated_at" TIMESTAMP NOT NULL DEFAULT now()`);
        await queryRunner.query(`CREATE INDEX "IDX_1be2a1680dcc4180f6d73719f7" ON "devices" ("provider_type") `);
        await queryRunner.query(`CREATE INDEX "IDX_a5f9c9ea439843d910175526ca" ON "devices" ("external_id") `);
        await queryRunner.query(`CREATE INDEX "IDX_60c835590ee51ba2f1b710846c" ON "devices" ("expires_at") `);
        await queryRunner.query(`CREATE INDEX "IDX_1ce119cdee079ceb9c23cafe4c" ON "device_snapshots" ("expiresAt") `);
        await queryRunner.query(`CREATE INDEX "IDX_dc9ef6e9eb7f8fcc4e61fb2e86" ON "device_allocations" ("device_id") `);
        await queryRunner.query(`CREATE INDEX "IDX_2c4aae3fb1892fa379754a71a4" ON "device_allocations" ("allocated_at", "expires_at") `);
        await queryRunner.query(`CREATE INDEX "IDX_6383f4da7ae46dafa9f0a5d86f" ON "device_allocations" ("tenant_id", "status") `);
        await queryRunner.query(`CREATE INDEX "IDX_6f8ff0f1827628337c17ab704b" ON "device_allocations" ("user_id", "status") `);
        await queryRunner.query(`CREATE INDEX "IDX_e02b28eea5b9de8e39a24cf4aa" ON "device_allocations" ("device_id", "status") `);
        await queryRunner.query(`ALTER TABLE "device_allocations" ADD CONSTRAINT "FK_dc9ef6e9eb7f8fcc4e61fb2e86a" FOREIGN KEY ("device_id") REFERENCES "devices"("id") ON DELETE NO ACTION ON UPDATE NO ACTION`);
    }

    public async down(queryRunner: QueryRunner): Promise<void> {
        await queryRunner.query(`ALTER TABLE "device_allocations" DROP CONSTRAINT "FK_dc9ef6e9eb7f8fcc4e61fb2e86a"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_e02b28eea5b9de8e39a24cf4aa"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_6f8ff0f1827628337c17ab704b"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_6383f4da7ae46dafa9f0a5d86f"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_2c4aae3fb1892fa379754a71a4"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_dc9ef6e9eb7f8fcc4e61fb2e86"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_1ce119cdee079ceb9c23cafe4c"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_60c835590ee51ba2f1b710846c"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_a5f9c9ea439843d910175526ca"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_1be2a1680dcc4180f6d73719f7"`);
        await queryRunner.query(`ALTER TABLE "device_allocations" DROP COLUMN "updated_at"`);
        await queryRunner.query(`ALTER TABLE "device_allocations" ADD "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now()`);
        await queryRunner.query(`ALTER TABLE "device_allocations" DROP COLUMN "created_at"`);
        await queryRunner.query(`ALTER TABLE "device_allocations" ADD "created_at" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now()`);
        await queryRunner.query(`COMMENT ON COLUMN "device_allocations"."metadata" IS 'Additional metadata (JSON)'`);
        await queryRunner.query(`COMMENT ON COLUMN "device_allocations"."duration_seconds" IS 'Actual usage duration in seconds'`);
        await queryRunner.query(`COMMENT ON COLUMN "device_allocations"."duration_minutes" IS 'Requested allocation duration'`);
        await queryRunner.query(`COMMENT ON COLUMN "device_allocations"."expires_at" IS 'When the allocation expires'`);
        await queryRunner.query(`COMMENT ON COLUMN "device_allocations"."released_at" IS 'When the device was released'`);
        await queryRunner.query(`ALTER TABLE "device_allocations" ALTER COLUMN "allocated_at" SET DEFAULT now()`);
        await queryRunner.query(`COMMENT ON COLUMN "device_allocations"."allocated_at" IS 'When the device was allocated'`);
        await queryRunner.query(`ALTER TABLE "device_allocations" DROP COLUMN "status"`);
        await queryRunner.query(`DROP TYPE "public"."device_allocations_status_enum"`);
        await queryRunner.query(`ALTER TABLE "device_allocations" ADD "status" character varying(50) NOT NULL DEFAULT 'allocated'`);
        await queryRunner.query(`ALTER TABLE "device_allocations" DROP COLUMN "tenant_id"`);
        await queryRunner.query(`ALTER TABLE "device_allocations" ADD "tenant_id" character varying(255)`);
        await queryRunner.query(`ALTER TABLE "device_allocations" DROP COLUMN "user_id"`);
        await queryRunner.query(`ALTER TABLE "device_allocations" ADD "user_id" character varying(255) NOT NULL`);
        await queryRunner.query(`ALTER TABLE "device_allocations" DROP COLUMN "device_id"`);
        await queryRunner.query(`ALTER TABLE "device_allocations" ADD "device_id" character varying(255) NOT NULL`);
        await queryRunner.query(`COMMENT ON COLUMN "devices"."device_tags" IS '设备标签数组 (用于过滤和搜索)'`);
        await queryRunner.query(`COMMENT ON COLUMN "devices"."last_backup_at" IS '最后备份时间'`);
        await queryRunner.query(`COMMENT ON COLUMN "devices"."backup_interval_hours" IS '自动备份间隔（小时）'`);
        await queryRunner.query(`COMMENT ON COLUMN "devices"."auto_backup_enabled" IS '是否启用自动备份'`);
        await queryRunner.query(`ALTER TABLE "devices" ALTER COLUMN "auto_backup_enabled" DROP NOT NULL`);
        await queryRunner.query(`COMMENT ON COLUMN "devices"."expires_at" IS '设备到期时间（用于临时设备或有时限的设备）'`);
        await queryRunner.query(`COMMENT ON COLUMN "devices"."health_score" IS '设备健康评分 (0-100，低于 30 自动移除)'`);
        await queryRunner.query(`ALTER TABLE "devices" ALTER COLUMN "health_score" DROP NOT NULL`);
        await queryRunner.query(`ALTER TABLE "devices" DROP COLUMN "device_group"`);
        await queryRunner.query(`ALTER TABLE "devices" ADD "device_group" character varying(50)`);
        await queryRunner.query(`COMMENT ON COLUMN "devices"."connection_info" IS '连接信息 (ADB、SCRCPY、WebRTC token 等)'`);
        await queryRunner.query(`COMMENT ON COLUMN "devices"."provider_config" IS 'Provider 特定配置 (创建时的参数)'`);
        await queryRunner.query(`ALTER TABLE "devices" DROP COLUMN "external_id"`);
        await queryRunner.query(`ALTER TABLE "devices" ADD "external_id" character varying(100)`);
        await queryRunner.query(`COMMENT ON COLUMN "devices"."provider_type" IS '设备提供商类型: redroid/huawei_cph/aliyun_ecp/physical'`);
        await queryRunner.query(`ALTER TABLE "devices" ALTER COLUMN "provider_type" DROP NOT NULL`);
        await queryRunner.query(`CREATE TYPE "public"."device_provider_type_old" AS ENUM('redroid', 'huawei_cph', 'aliyun_ecp', 'physical')`);
        await queryRunner.query(`ALTER TABLE "devices" ALTER COLUMN "provider_type" DROP DEFAULT`);
        await queryRunner.query(`ALTER TABLE "devices" ALTER COLUMN "provider_type" TYPE "public"."device_provider_type_old" USING "provider_type"::"text"::"public"."device_provider_type_old"`);
        await queryRunner.query(`ALTER TABLE "devices" ALTER COLUMN "provider_type" SET DEFAULT 'redroid'`);
        await queryRunner.query(`DROP TYPE "public"."devices_provider_type_enum"`);
        await queryRunner.query(`ALTER TYPE "public"."device_provider_type_old" RENAME TO "device_provider_type"`);
        await queryRunner.query(`ALTER TABLE "devices" DROP COLUMN "description"`);
        await queryRunner.query(`ALTER TABLE "devices" ADD "description" character varying`);
        await queryRunner.query(`ALTER TABLE "device_snapshots" DROP COLUMN "isAutoBackup"`);
        await queryRunner.query(`ALTER TABLE "device_snapshots" DROP COLUMN "expiresAt"`);
        await queryRunner.query(`ALTER TABLE "device_snapshots" DROP COLUMN "retentionDays"`);
        await queryRunner.query(`ALTER TABLE "device_snapshots" ADD "is_auto_backup" boolean DEFAULT false`);
        await queryRunner.query(`ALTER TABLE "device_snapshots" ADD "expires_at" TIMESTAMP`);
        await queryRunner.query(`ALTER TABLE "device_snapshots" ADD "retention_days" integer`);
        await queryRunner.query(`DROP INDEX "public"."IDX_7954507911e50543a11d9d471c"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_65b9b3c578d40a13f805951cd1"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_464ea909149a700c25a48ea2fd"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_914731bf904e2e250850ee2df5"`);
        await queryRunner.query(`DROP TABLE "allocation_queue"`);
        await queryRunner.query(`DROP TYPE "public"."allocation_queue_status_enum"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_cb38a3b4b9e4d30780c6896a9f"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_2878599597f12b378905fed26f"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_c20138af3bba2b44ab606f3ca3"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_9878097628fe97b1df7429e2c2"`);
        await queryRunner.query(`DROP TABLE "device_reservations"`);
        await queryRunner.query(`DROP TYPE "public"."device_reservations_status_enum"`);
        await queryRunner.query(`COMMENT ON TABLE "device_allocations" IS 'Stores device allocation records for scheduling'`);
        await queryRunner.query(`ALTER TABLE "device_allocations" ADD CONSTRAINT "check_duration_seconds" CHECK ((duration_seconds >= 0))`);
        await queryRunner.query(`ALTER TABLE "device_allocations" ADD CONSTRAINT "check_duration_minutes" CHECK ((duration_minutes > 0))`);
        await queryRunner.query(`ALTER TABLE "device_allocations" ADD CONSTRAINT "check_status" CHECK (((status)::text = ANY ((ARRAY['allocated'::character varying, 'released'::character varying, 'expired'::character varying])::text[])))`);
        await queryRunner.query(`CREATE INDEX "idx_device_allocations_active_expired" ON "device_allocations" ("status", "expires_at") WHERE ((status)::text = 'allocated'::text)`);
        await queryRunner.query(`CREATE INDEX "idx_device_allocations_tenant_status" ON "device_allocations" ("tenant_id", "status") `);
        await queryRunner.query(`CREATE INDEX "idx_device_allocations_user_status" ON "device_allocations" ("user_id", "status") `);
        await queryRunner.query(`CREATE INDEX "idx_device_allocations_device_status" ON "device_allocations" ("device_id", "status") `);
        await queryRunner.query(`CREATE INDEX "idx_device_allocations_expires_at" ON "device_allocations" ("expires_at") WHERE (((status)::text = 'allocated'::text) AND (expires_at IS NOT NULL))`);
        await queryRunner.query(`CREATE INDEX "idx_device_allocations_allocated_at" ON "device_allocations" ("allocated_at") `);
        await queryRunner.query(`CREATE INDEX "idx_device_allocations_status" ON "device_allocations" ("status") `);
        await queryRunner.query(`CREATE INDEX "idx_device_allocations_tenant_id" ON "device_allocations" ("tenant_id") `);
        await queryRunner.query(`CREATE INDEX "idx_device_allocations_user_id" ON "device_allocations" ("user_id") `);
        await queryRunner.query(`CREATE INDEX "idx_device_allocations_device_id" ON "device_allocations" ("device_id") `);
        await queryRunner.query(`CREATE INDEX "idx_device_snapshots_device_id_created_at" ON "device_snapshots" ("deviceId", "createdAt") `);
        await queryRunner.query(`CREATE INDEX "idx_device_snapshots_auto_backup" ON "device_snapshots" ("is_auto_backup") WHERE (is_auto_backup = true)`);
        await queryRunner.query(`CREATE INDEX "idx_device_snapshots_expires_at" ON "device_snapshots" ("expires_at") WHERE (expires_at IS NOT NULL)`);
        await queryRunner.query(`CREATE INDEX "idx_snapshots_device_created" ON "device_snapshots" ("deviceId", "createdAt") `);
        await queryRunner.query(`CREATE INDEX "idx_devices_createdat" ON "devices" ("createdAt") `);
        await queryRunner.query(`CREATE INDEX "idx_devices_auto_backup" ON "devices" ("auto_backup_enabled") WHERE (auto_backup_enabled = true)`);
        await queryRunner.query(`CREATE INDEX "idx_devices_expires_at" ON "devices" ("expires_at") WHERE (expires_at IS NOT NULL)`);
        await queryRunner.query(`CREATE INDEX "idx_devices_user_provider" ON "devices" ("userId", "provider_type") WHERE ("userId" IS NOT NULL)`);
        await queryRunner.query(`CREATE INDEX "idx_devices_health_score" ON "devices" ("health_score") WHERE (health_score < 50)`);
        await queryRunner.query(`CREATE INDEX "idx_devices_container" ON "devices" ("containerId") WHERE ("containerId" IS NOT NULL)`);
        await queryRunner.query(`CREATE INDEX "idx_devices_status_heartbeat" ON "devices" ("status", "lastHeartbeatAt") WHERE (status = 'running'::devices_status_enum)`);
        await queryRunner.query(`CREATE INDEX "idx_devices_user_created" ON "devices" ("userId", "createdAt") WHERE ("userId" IS NOT NULL)`);
        await queryRunner.query(`CREATE INDEX "idx_devices_tenant_status" ON "devices" ("status", "tenantId") WHERE ("tenantId" IS NOT NULL)`);
        await queryRunner.query(`CREATE INDEX "idx_devices_user_status" ON "devices" ("status", "userId") WHERE ("userId" IS NOT NULL)`);
        await queryRunner.query(`CREATE INDEX "idx_devices_group" ON "devices" ("device_group") WHERE (device_group IS NOT NULL)`);
        await queryRunner.query(`CREATE INDEX "idx_devices_provider_status" ON "devices" ("status", "provider_type") `);
        await queryRunner.query(`CREATE INDEX "idx_devices_external_id" ON "devices" ("external_id") WHERE (external_id IS NOT NULL)`);
        await queryRunner.query(`CREATE INDEX "idx_devices_provider_type" ON "devices" ("provider_type") `);
        await queryRunner.query(`CREATE INDEX "idx_devices_status_expires" ON "devices" ("status", "expires_at") WHERE (expires_at IS NOT NULL)`);
    }

}
