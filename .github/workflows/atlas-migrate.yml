name: Atlas Database Migrations

on:
  push:
    branches:
      - main
      - develop
    paths:
      - 'backend/**/migrations/**'
      - 'backend/**/atlas.hcl'
      - '.github/workflows/atlas-migrate.yml'
  pull_request:
    branches:
      - main
      - develop
    paths:
      - 'backend/**/migrations/**'
      - 'backend/**/atlas.hcl'

jobs:
  # 验证迁移文件
  lint-migrations:
    name: Lint Migration Files
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          - user-service
          - device-service
          - billing-service
          - app-service
          - notification-service
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Atlas CLI
        uses: ariga/setup-atlas@v0
        with:
          cloud-token: ${{ secrets.ATLAS_CLOUD_TOKEN }}

      - name: Lint migrations for ${{ matrix.service }}
        working-directory: backend/${{ matrix.service }}
        run: |
          if [ -d "migrations" ] && [ "$(ls -A migrations)" ]; then
            echo "🔍 Linting migrations for ${{ matrix.service }}..."
            atlas migrate lint \
              --dir "file://migrations" \
              --dev-url "docker://postgres/15/dev" \
              --latest 1
          else
            echo "⚠️  No migrations found for ${{ matrix.service }}, skipping..."
          fi

  # 验证迁移安全性
  validate-migrations:
    name: Validate Migration Safety
    runs-on: ubuntu-latest
    needs: lint-migrations
    strategy:
      matrix:
        service:
          - user-service
          - device-service
          - billing-service
          - app-service
          - notification-service

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Atlas CLI
        uses: ariga/setup-atlas@v0

      - name: Start PostgreSQL
        run: |
          docker run -d \
            --name postgres-${{ matrix.service }} \
            -e POSTGRES_USER=postgres \
            -e POSTGRES_PASSWORD=postgres \
            -e POSTGRES_DB=cloudphone \
            -p 5432:5432 \
            postgres:15-alpine
          
          # Wait for PostgreSQL to be ready
          timeout 30 bash -c 'until docker exec postgres-${{ matrix.service }} pg_isready -U postgres; do sleep 1; done'

      - name: Validate migrations for ${{ matrix.service }}
        working-directory: backend/${{ matrix.service }}
        run: |
          if [ -d "migrations" ] && [ "$(ls -A migrations)" ]; then
            echo "✅ Validating migrations for ${{ matrix.service }}..."
            atlas migrate validate \
              --dir "file://migrations" \
              --dev-url "docker://postgres/15/dev"
          else
            echo "⚠️  No migrations found for ${{ matrix.service }}, skipping..."
          fi

      - name: Cleanup
        if: always()
        run: docker rm -f postgres-${{ matrix.service }} || true

  # 在 Staging 环境应用迁移 (仅 main 分支)
  apply-staging:
    name: Apply Migrations to Staging
    runs-on: ubuntu-latest
    needs: validate-migrations
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: staging
    strategy:
      matrix:
        service:
          - user-service
          - device-service
          - billing-service
          - app-service
          - notification-service

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Atlas CLI
        uses: ariga/setup-atlas@v0

      - name: Apply migrations to staging - ${{ matrix.service }}
        working-directory: backend/${{ matrix.service }}
        env:
          DATABASE_URL: ${{ secrets.STAGING_DATABASE_URL }}
        run: |
          if [ -d "migrations" ] && [ "$(ls -A migrations)" ]; then
            echo "🚀 Applying migrations to staging for ${{ matrix.service }}..."
            atlas migrate apply \
              --url "${DATABASE_URL}" \
              --dir "file://migrations"
          else
            echo "⚠️  No migrations found for ${{ matrix.service }}, skipping..."
          fi

  # 生成迁移报告
  migration-report:
    name: Generate Migration Report
    runs-on: ubuntu-latest
    needs: validate-migrations
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Atlas CLI
        uses: ariga/setup-atlas@v0

      - name: Generate migration status report
        id: report
        run: |
          echo "# 📊 Atlas Migration Status Report" > report.md
          echo "" >> report.md
          echo "## Services Migration Status" >> report.md
          echo "" >> report.md
          
          for service in user-service device-service billing-service app-service notification-service; do
            echo "### 🔹 $service" >> report.md
            cd backend/$service
            
            if [ -d "migrations" ] && [ "$(ls -A migrations 2>/dev/null)" ]; then
              migration_count=$(find migrations -name "*.sql" | wc -l)
              echo "- ✅ Migrations found: **$migration_count** files" >> ../../report.md
              echo "" >> ../../report.md
              echo "\`\`\`" >> ../../report.md
              ls -la migrations/ >> ../../report.md 2>&1 || echo "Error listing migrations" >> ../../report.md
              echo "\`\`\`" >> ../../report.md
            else
              echo "- ⚠️  No migrations found" >> ../../report.md
            fi
            echo "" >> ../../report.md
            cd ../..
          done

      - name: Comment PR with report
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('report.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            });

