services:
  # ===== 基础设施服务 =====

  # PostgreSQL 数据库
  postgres:
    image: postgres:14-alpine
    container_name: cloudphone-postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: cloudphone
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init-databases.sql:/docker-entrypoint-initdb.d/01-init-databases.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - cloudphone-network

  # Redis 缓存
  redis:
    image: redis:7-alpine
    container_name: cloudphone-redis
    command: redis-server --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - cloudphone-network

  # MinIO 对象存储
  minio:
    image: minio/minio:latest
    container_name: cloudphone-minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - cloudphone-network

  # RabbitMQ 消息队列
  rabbitmq:
    image: rabbitmq:3.13-management-alpine
    container_name: cloudphone-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin123
      RABBITMQ_DEFAULT_VHOST: cloudphone
    ports:
      - "5672:5672"    # AMQP 端口
      - "15672:15672"  # 管理界面端口
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - cloudphone-network

  # Consul 服务注册发现
  consul:
    image: hashicorp/consul:1.18
    container_name: cloudphone-consul
    command: agent -server -ui -bootstrap-expect=1 -client=0.0.0.0 -bind=0.0.0.0
    ports:
      - "8500:8500"      # HTTP API 和 Web UI
      - "8600:8600/udp"  # DNS 服务
    volumes:
      - consul_data:/consul/data
    healthcheck:
      test: ["CMD", "consul", "members"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - cloudphone-network

  # ===== 微服务（开发模式 - 本地代码挂载） =====

  # API 网关
  api-gateway:
    build:
      context: ./backend/api-gateway
      dockerfile: ../../infrastructure/docker/api-gateway.Dockerfile
      target: development
    container_name: cloudphone-api-gateway
    environment:
      NODE_ENV: development
      PORT: 30000
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: postgres
      DB_PASSWORD: postgres
      DB_DATABASE: cloudphone_core
      REDIS_HOST: redis
      REDIS_PORT: 6379
      USER_SERVICE_URL: http://user-service:30001
      DEVICE_SERVICE_URL: http://device-service:30002
      APP_SERVICE_URL: http://app-service:30003
      SCHEDULER_SERVICE_URL: http://scheduler-service:30004
      BILLING_SERVICE_URL: http://billing-service:30005
      NOTIFICATION_SERVICE_URL: http://notification-service:30006
      MEDIA_SERVICE_URL: http://media-service:30007
      JWT_SECRET: dev-secret-key-change-in-production
      JWT_EXPIRES_IN: 24h
      CONSUL_HOST: consul
      CONSUL_PORT: 8500
      USE_CONSUL: "true"
    ports:
      - "30000:30000"
    volumes:
      - ./backend/api-gateway:/app
      - api_gateway_node_modules:/app/node_modules
    depends_on:
      - postgres
      - redis
      - rabbitmq
      - consul
      - user-service
      - device-service
      - app-service
      - scheduler-service
      - billing-service
      - media-service
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:30000/api/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - cloudphone-network
    command: pnpm run dev

  # 用户服务
  user-service:
    build:
      context: ./backend/user-service
      dockerfile: ../../infrastructure/docker/user-service.Dockerfile
      target: development
    container_name: cloudphone-user-service
    environment:
      NODE_ENV: development
      PORT: 30001
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: postgres
      DB_PASSWORD: postgres
      DB_DATABASE: cloudphone_core
      REDIS_HOST: redis
      REDIS_PORT: 6379
      JWT_SECRET: dev-secret-key-change-in-production
    ports:
      - "30001:30001"
    volumes:
      - ./backend/user-service:/app
      - user_service_node_modules:/app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:30001/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - cloudphone-network
    command: pnpm run dev

  # 设备服务
  device-service:
    build:
      context: ./backend/device-service
      dockerfile: ../../infrastructure/docker/device-service.Dockerfile
      target: development
    container_name: cloudphone-device-service
    environment:
      NODE_ENV: development
      PORT: 30002
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: postgres
      DB_PASSWORD: postgres
      DB_DATABASE: cloudphone_core
      REDIS_HOST: redis
      REDIS_PORT: 6379
      DOCKER_HOST: unix:///var/run/docker.sock
      JWT_SECRET: dev-secret-key-change-in-production
      JWT_EXPIRES_IN: 24h
      RABBITMQ_URL: amqp://admin:admin123@rabbitmq:5672/cloudphone
      CONSUL_HOST: consul
      CONSUL_PORT: 8500
    ports:
      - "30002:30002"
    volumes:
      - ./backend/device-service:/app
      - device_service_node_modules:/app/node_modules
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      consul:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "node -e \"require('http').get('http://localhost:30002/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})\""]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 90s
    networks:
      - cloudphone-network
    command: pnpm run dev

  # 应用服务
  app-service:
    build:
      context: ./backend/app-service
      dockerfile: ../../infrastructure/docker/app-service.Dockerfile
      target: development
    container_name: cloudphone-app-service
    environment:
      NODE_ENV: development
      PORT: 30003
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: postgres
      DB_PASSWORD: postgres
      DB_DATABASE: cloudphone_core
      REDIS_HOST: redis
      REDIS_PORT: 6379
      MINIO_ENDPOINT: minio
      MINIO_PORT: 9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
      MINIO_USE_SSL: false
      DEVICE_SERVICE_URL: http://device-service:30002
      JWT_SECRET: dev-secret-key-change-in-production
      JWT_EXPIRES_IN: 24h
      RABBITMQ_URL: amqp://admin:admin123@rabbitmq:5672/cloudphone
      CONSUL_HOST: consul
      CONSUL_PORT: 8500
    ports:
      - "30003:30003"
    volumes:
      - ./backend/app-service:/app
      - app_service_node_modules:/app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      consul:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "node -e \"require('http').get('http://localhost:30003/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})\""]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 90s
    networks:
      - cloudphone-network
    command: pnpm run dev

  # 调度服务
  scheduler-service:
    build:
      context: ./backend/scheduler-service
      dockerfile: ../../infrastructure/docker/scheduler-service.Dockerfile
      target: development
    container_name: cloudphone-scheduler-service
    environment:
      ENVIRONMENT: development
      PORT: 30004
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: postgres
      DB_PASSWORD: postgres
      DB_DATABASE: cloudphone_scheduler
      REDIS_HOST: redis
      REDIS_PORT: 6379
      DEVICE_SERVICE_URL: http://device-service:30002
    ports:
      - "30004:30004"
    volumes:
      - ./backend/scheduler-service:/app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "python -c 'import urllib.request; urllib.request.urlopen(\"http://localhost:30004/health\")' || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - cloudphone-network
    command: /app/start.sh

  # 计费服务
  billing-service:
    build:
      context: ./backend/billing-service
      dockerfile: ../../infrastructure/docker/billing-service.Dockerfile
      target: development
    container_name: cloudphone-billing-service
    environment:
      NODE_ENV: development
      PORT: 30005
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: postgres
      DB_PASSWORD: postgres
      DB_DATABASE: cloudphone_billing
      REDIS_HOST: redis
      REDIS_PORT: 6379
      JWT_SECRET: dev-secret-key-change-in-production
      JWT_EXPIRES_IN: 24h
      DEVICE_SERVICE_URL: http://device-service:30002
      RABBITMQ_URL: amqp://admin:admin123@rabbitmq:5672/cloudphone
      CONSUL_HOST: consul
      CONSUL_PORT: 8500
    ports:
      - "30005:30005"
    volumes:
      - ./backend/billing-service:/app
      - billing_service_node_modules:/app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      consul:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "node -e \"require('http').get('http://localhost:30005/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})\""]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 90s
    networks:
      - cloudphone-network
    command: pnpm run dev

  # 通知服务
  notification-service:
    build:
      context: ./backend/notification-service
      dockerfile: Dockerfile
      target: development
    container_name: cloudphone-notification-service
    environment:
      NODE_ENV: development
      PORT: 30006
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: postgres
      DB_PASSWORD: postgres
      DB_DATABASE: cloudphone_core
      REDIS_HOST: redis
      REDIS_PORT: 6379
      JWT_SECRET: dev-secret-key-change-in-production
      JWT_EXPIRES_IN: 24h
      EMAIL_HOST: smtp.gmail.com
      EMAIL_PORT: 587
      EMAIL_USER: your-email@gmail.com
      EMAIL_PASSWORD: your-app-password
      EMAIL_FROM: noreply@cloudphone.com
    ports:
      - "30006:30006"
    volumes:
      - ./backend/notification-service:/app
      - notification_service_node_modules:/app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "node -e \"require('http').get('http://localhost:30006/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})\""]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 90s
    networks:
      - cloudphone-network
    command: pnpm run dev

  # 流媒体服务
  media-service:
    build:
      context: ./backend/media-service
      dockerfile: ../../infrastructure/docker/media-service.Dockerfile
      target: development
    container_name: cloudphone-media-service
    environment:
      PORT: 30007
      GIN_MODE: debug
      STUN_SERVERS: stun:stun.l.google.com:19302
      ICE_PORT_MIN: 50000
      ICE_PORT_MAX: 50100
      DEVICE_SERVICE_URL: http://device-service:30002
    ports:
      - "30007:30007"
      - "50000-50100:50000-50100/udp"
    volumes:
      - ./backend/media-service:/app
    depends_on:
      - redis
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 -O /dev/null http://localhost:30007/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - cloudphone-network
    command: go run main.go

  # ===== 前端服务 =====

  # 管理后台前端
  admin-frontend:
    build:
      context: ./frontend/admin
      dockerfile: ../../infrastructure/docker/admin-frontend.Dockerfile
      target: development
    container_name: cloudphone-admin-frontend
    environment:
      VITE_API_BASE_URL: http://localhost:30000/api
      VITE_WS_URL: ws://localhost:30000
    ports:
      - "5173:5173"
    volumes:
      - ./frontend/admin:/app
      - admin_frontend_node_modules:/app/node_modules
    networks:
      - cloudphone-network
    command: pnpm run dev

  # 用户端前端
  user-frontend:
    build:
      context: ./frontend/user
      dockerfile: ../../infrastructure/docker/user-frontend.Dockerfile
      target: development
    container_name: cloudphone-user-frontend
    environment:
      VITE_API_BASE_URL: http://localhost:30000/api
      VITE_WS_URL: ws://localhost:30000
    ports:
      - "5174:5174"
    volumes:
      - ./frontend/user:/app
      - user_frontend_node_modules:/app/node_modules
    networks:
      - cloudphone-network
    command: pnpm run dev

# 网络配置
networks:
  cloudphone-network:
    driver: bridge

# 数据卷配置
volumes:
  # 基础设施数据卷
  postgres_data:
    driver: local
  redis_data:
    driver: local
  minio_data:
    driver: local
  rabbitmq_data:
    driver: local
  consul_data:
    driver: local
  # 后端服务 node_modules
  api_gateway_node_modules:
    driver: local
  user_service_node_modules:
    driver: local
  device_service_node_modules:
    driver: local
  app_service_node_modules:
    driver: local
  billing_service_node_modules:
    driver: local
  notification_service_node_modules:
    driver: local
  # 前端应用 node_modules
  admin_frontend_node_modules:
    driver: local
  user_frontend_node_modules:
    driver: local
